<?php

require_once("includes/SuperDate.php");
require_once("includes/DBExporter.php");

class User extends DBExporter {

	// members
	protected $id;
	protected $name;
	protected $surname;
	protected $email;
	protected $password;
	protected $lastLogin;
	protected $accesslevel;

	// constructor
	public function __construct($id=false) {
		$this->lastLogin = new SuperDate();
		if($id) {
			$this->loadFromDB($id);
		}
	}

	public function getId() {
		return $this->id;
	}
			
	public function setId($id) {
		if($id!=$this->id) {
			$this->markDirty();          
			$this->id = $id;
		}
	}

	public function getName() {
		return $this->name;
	}
			
	public function setName($name) {
		if($name!=$this->name) {
			$this->markDirty();          
			$this->name = $name;
		}
	}

	public function getSurname() {
		return $this->surname;
	}
			
	public function setSurname($surname) {
		if($surname!=$this->surname) {
			$this->markDirty();          
			$this->surname = $surname;
		}
	}

	public function getEmail() {
		return $this->email;
	}
			
	public function setEmail($email) {
		if($email!=$this->email) {
			$this->markDirty();          
			$this->email = $email;
		}
	}

	public function getPassword() {
		return $this->password;
	}
			
	public function setPassword($password) {
		if($password!=$this->password) {
			$this->markDirty();          
			$this->password = $password;
		}
	}

	public function getLastLogin() {
		return $this->lastLogin;
	}
	
	public function setLastLogin($lastLogin) {
		if(is_object($lastLogin) && get_class($lastLogin)=="SuperDate") {
			if($this->lastLogin->getAsSeconds() != $lastLogin->getAsSeconds()) {
				$this->lastLogin = $lastLogin;
				$this->markDirty();          
			}
		} else {
			if(!$this->lastLogin->equals($lastLogin)) {
				$this->lastLogin->initialiseMySQLDate($lastLogin);
				$this->markDirty();          
			}
		}
	}

	public function getAccesslevel() {
		return $this->accesslevel;
	}
			
	public function setAccesslevel($accesslevel) {
		if($accesslevel!=$this->accesslevel) {
			$this->markDirty();          
			$this->accesslevel = $accesslevel;
		}
	}

	// allow all values to be set by passing in an associative array
	public function loadFromArray($p) {  
		$this->setId($p['id']);
		$this->setName($p['name']);
		$this->setSurname($p['surname']);
		$this->setEmail($p['email']);
		$this->setPassword($p['password']);
		$this->setLastLogin($p['last_login']);
		$this->setAccesslevel($p['accesslevel']);
		$this->markUnchanged();
	}

	
	// Loads from the database given an id
	public function loadFromDB($id) {
		global $mysqlread;
		// load the data
		$query = "SELECT * FROM user WHERE id = '".mysql_escape_string($id)."'";
		$p = $mysqlread->getSingleRow($query);
		if($p) {
			$this->loadFromArray($p);
			return 1;
		}
		return 0;
	}

	// Updates an existing object in the database, overwriting the values in this object
	public function updateDB() {
		global $mysqlwrite;
		// update the database
		$query = "REPLACE INTO user
			    				SET id = '".mysql_escape_string($this->getId())."',
											name = '".mysql_escape_string($this->getName())."',
											surname = '".mysql_escape_string($this->getSurname())."',
											email = '".mysql_escape_string($this->getEmail())."',
											password = '".mysql_escape_string($this->getPassword())."',
											last_login = '".mysql_escape_string($this->getLastLogin()->getAsMySQLDate()." ".$this->getLastLogin()->getAsTime())."',
											accesslevel = '".mysql_escape_string($this->getAccesslevel())."'";
		$mysqlwrite->doQuery($query);
		$this->markUnchanged();
	}

	// Delete this object
	public function deleteDB() {
		global $mysqlwrite;
		// delete this id
		$query = "DELETE FROM user WHERE id = '".mysql_escape_string($this->getId())."'";
		$mysqlwrite->doQuery($query);
	}

	// Saves this to the database for the first time
	public function saveDB() {
		global $mysqlwrite;
		// update the database
		$query = "INSERT INTO user
								SET name = '".mysql_escape_string($this->getName())."',
										surname = '".mysql_escape_string($this->getSurname())."',
										email = '".mysql_escape_string($this->getEmail())."',
										password = '".mysql_escape_string($this->getPassword())."',
										last_login = '".mysql_escape_string($this->getLastLogin()->getAsMySQLDate()." ".$this->getLastLogin()->getAsTime())."',
										accesslevel = '".mysql_escape_string($this->getAccesslevel())."'";
		$this->setId($mysqlwrite->doQuery($query));
		$this->markUnchanged();
	}



	
	//---- not generated by classfactory
	
	public static function checkEmailPass($email,$password){
			
		global $mysqlread;
		
		if(!preg_match ('/^[[:alnum:]][a-z0-9_\.\-]*@[a-z0-9\.\-]+\.[a-z]{2,4}$/i', stripslashes(trim($email)))) {			
			return false;
		}
		
		$query = "SELECT id FROM user WHERE email = '".mysql_escape_string($email)."' AND password = '".mysql_escape_string($password)."'";
		$p = $mysqlread->getSingleField($query);
		
		if(!$p) {
			return false;
		}  else {
			return new User($p);
		}

	}	

	public static function whereEmail($email){
		
		global $mysqlread;
		
		$query = "SELECT id FROM user WHERE email = '".mysql_escape_string($email)."'";
		$p = $mysqlread->getSingleField($query);
		if(!$p) {
			return false;
		}  else {
			return new User($p);
		}
		
		//-e whereEmail
		
	}
	
	
	
	public function where($wheresql) {
		
		global $mysqlread;
		// load the data	
		
		$query = "SELECT * FROM user WHERE ".$wheresql;
		
		$p = $mysqlread->getSingleRow($query);
		if($p) {
			$this->loadFromArray($p);
			return 1;
		}
		return 0;
	}
	
	
	

	// Generate a password
	static public function generatePassword() {
		$alphabet = array("a","b","c","d","e","f","g","h","j","k","m","n",
											"p","q","r","s","t","u","v","w","x","y","z",
											"2","3","4","5","6","7","8","9");
		$password = "";
		for($i=0;$i<8;$i++) {
			$j = array_rand($alphabet);
			$password.=$alphabet[$j];
		}
		return trim($password);
	}

}

?>	
